import express from 'express'; import bcrypt from 'bcryptjs'; import jwt from 'jsonwebtoken'; import { query } from '../db.js'; export const authRouter = express.Router(); authRouter.post('/signup', async (req, res) => { const { email, password, role } = req.body; if (!email || !password) return res.status(400).json({ error: 'Email and password required' }); const existing = await query('SELECT id FROM users WHERE email=$1', [email]); if (existing.rowCount) return res.status(409).json({ error: 'Email already in use' }); const hash = await bcrypt.hash(password, 10); const r = await query('INSERT INTO users (email,password,role) VALUES ($1,$2,$3) RETURNING id,email,role', [email, hash, role === 'CREATOR' ? 'CREATOR' : 'CONSUMER']); const user = r.rows[0]; const token = jwt.sign({ id: user.id, email: user.email, role: user.role }, process.env.JWT_SECRET, { expiresIn: '7d' }); res.json({ token, user }); }); authRouter.post('/login', async (req, res) => { const { email, password } = req.body; const r = await query('SELECT * FROM users WHERE email=$1', [email]); if (!r.rowCount) return res.status(401).json({ error: 'Invalid credentials' }); const user = r.rows[0]; const ok = await bcrypt.compare(password, user.password); if (!ok) return res.status(401).json({ error: 'Invalid credentials' }); const token = jwt.sign({ id: user.id, email: user.email, role: user.role }, process.env.JWT_SECRET, { expiresIn: '7d' }); res.json({ token, user: { id: user.id, email: user.email, role: user.role } }); });