import express from 'express'; import { query } from '../db.js'; import { authRequired, requireRole } from './middleware.js'; export const videosRouter = express.Router(); videosRouter.get('/', async (_req, res) => { const r = await query('SELECT v.*, u.email as creator_email FROM videos v JOIN users u ON v.creator_id=u.id ORDER BY v.created_at DESC'); res.json(r.rows.map(row => ({ id: row.id, title: row.title, description: row.description, url: row.url, createdAt: row.created_at, creator: { email: row.creator_email } }))); }); videosRouter.post('/', authRequired, requireRole('CREATOR'), async (req, res) => { const { title, description, url } = req.body; if (!title || !url) return res.status(400).json({ error: 'title and url required' }); const r = await query('INSERT INTO videos (title,description,url,creator_id) VALUES ($1,$2,$3,$4) RETURNING *', [title, description || '', url, req.user.id]); res.json(r.rows[0]); }); videosRouter.get('/:id', async (req, res) => { const r = await query('SELECT v.*, u.email as creator_email FROM videos v JOIN users u ON v.creator_id=u.id WHERE v.id=$1', [req.params.id]); if (!r.rowCount) return res.status(404).json({ error: 'Not found' }); const row = r.rows[0]; res.json({ id: row.id, title: row.title, description: row.description, url: row.url, createdAt: row.created_at, creator: { email: row.creator_email } }); });